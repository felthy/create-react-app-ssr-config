'use strict';

require('source-map-support/register');
const _ = require('lodash');
const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');
const webpackHotServerMiddleware = require('webpack-hot-server-middleware');
const errorMiddleware = require('../src/server/middleware/error');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appIndexJs])) {
  process.exit(1);
}

module.exports = function (port, host) {
  const config = configFactory('development');
  const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
  const appName = require(paths.appPackageJson).name;
  const useTypeScript = fs.existsSync(paths.appTsConfig);
  const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';
  const urls = prepareUrls(
    protocol,
    host,
    port,
    paths.publicUrlOrPath.slice(0, -1)
  );
  const devSocket = {
    warnings: warnings =>
      devServer.sockWrite(devServer.sockets, 'warnings', warnings),
    errors: errors =>
      devServer.sockWrite(devServer.sockets, 'errors', errors),
  };
  // Create a webpack compiler that is configured with custom messages.
  const compiler = createCompiler({
    appName,
    config,
    devSocket,
    urls,
    useYarn,
    useTypeScript,
    tscCompileOnError,
    webpack,
  });
  // Load proxy config
  const proxySetting = require(paths.appPackageJson).proxy;
  const proxyConfig = prepareProxy(
    proxySetting,
    paths.appPublic,
    paths.publicUrlOrPath
  );
  // Serve webpack assets generated by the compiler over a web server.
  const serverConfig = createDevServerConfig(
    proxyConfig,
    urls.lanUrlForConfig
  );

  serverConfig.after = app => {
    app.use(webpackHotServerMiddleware(compiler, {
      createHandler: (error, serverRenderer) => (req, res, next) => {
        if (error ||
          // if the dev server doesn't handle a hot-update request, we don't want to pass it through
          // to the SSR server
          req.url.indexOf('hot-update') >= 0) {
          return next(error);
        }
        serverRenderer(req, res, next);
      }
    }));
    app.use(errorMiddleware);
  }

  const devServer = new WebpackDevServer(compiler, serverConfig);

  compiler.hooks.done.tap('WebpackDevServer', _.once(() => {
    // Launch WebpackDevServer.
    devServer.listen(port, host, err => {
      if (err) {
        return console.log(err);
      }
      openBrowser(urls.localUrlForBrowser);
    });
  }));

  if (isInteractive) {
    clearConsole();
  }

  // We used to support resolving modules according to `NODE_PATH`.
  // This now has been deprecated in favor of jsconfig/tsconfig.json
  // This lets you use absolute paths in imports inside large monorepos:
  if (process.env.NODE_PATH) {
    console.log(
      chalk.yellow(
        'Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app.'
      )
    );
    console.log();
  }

  console.log(chalk.cyan('Starting the development server...\n'));

  return devServer;
};
